/**
 * CDP Cloud Rebuilt
 * ===================
 * Basic Tools
 * ===================
 * Author: Ash Zhang
 * Created: 2014/06/09
 * ===================
 * - setLang(lang)
 * - parseLocaleKey(localeKey)
 * - destroyComponent(obj)
 * - centerElem($el)
 * - reportScroll($scrollingParent)
 * - dialog($dialog)
 * - closeDialog($dialog)
 * - message(text, duration)
 */


(function (w, d) {


  /**
   * setLang: Set language
   * 1. setLang(): set default language to the whole page
   * 2. setLang(lang): set target language to the whole page
   * 3. setLang($el): set default language to certain $el
   * 4. setLang(lang, $el): set target language to certain $el
   */

  function setLang() {
    var targetLang,
        $el;

    // Argument Check
    if (arguments.length === 0) {

      // 1. setLang()
      targetLang = CDP_CONFIG.langType;
      $el = $(d);
    } else if (arguments.length === 1) {

      if (typeof arguments[0] === 'string') {

        // 2. setLang(lang)
        targetLang = arguments[0];
        $el = $(d);
      } else if (arguments[0] instanceof jQuery) {

        // 3. setLang($el)
        targetLang = CDP_CONFIG.langType;
        $el = arguments[0];
      }
    } else {
      targetLang = arguments[0];
      $el = arguments[1];
    }

    // Change current language
    CDP_CONFIG.langType = targetLang;

    // Refresh page elements
    $el.find('[data-locale]').each(function () {
      var langStr = CDP_CONFIG.lang[targetLang][this.getAttribute('data-locale')];

      if (langStr !== undefined && langStr !== "") {
        this.innerHTML = langStr;
      }
    });

    $el.find('[data-locale-value]').each(function () {
      var langStr = CDP_CONFIG.lang[targetLang][this.getAttribute('data-locale-value')];

      if (langStr !== undefined && langStr !== "") {
        this.value = langStr;
      }
    });
  }

  // ----- Set language end ----- //


  /**
   * parseLocaleKey: get real text from localeKey
   * @param localeKey
   * @returns {*}
   */
  function parseLocaleKey(localeKey) {
    var localeText = CDP_CONFIG.lang[CDP_CONFIG.langType][localeKey];

    return (typeof localeText === 'string') ? localeText : ''
  }


  /**
   * Destroy a component generated by Backbone
   * @param obj
   */
  function destroyComponent(obj) {

    if (typeof obj !== 'object' || _.isNull(obj)) {
      return;
    }

    if (typeof obj.destroy === 'function') {
      obj.destroy();
    } else {

      if (obj.view) {
        obj.view.remove();
      }

      if (obj.model) {
        obj.model.destroy();
      }

      if (obj.$el) {
        obj.$el.remove();
      }
    }

    obj = null;
  }

  /**
   * centerElem: Center an element
   * - Make an element center of the screen
   * @param $el {object}
   */
  function centerElem($el) {
    var top = (d.documentElement.clientHeight - $el.outerHeight()) / 2;

    $el.css({
      left: (d.documentElement.clientWidth - $el.outerWidth()) / 2,
      top: Math.max(top, 50) + $(w).scrollTop()
    });
  }


  /**
   * setReportScroll: Report Scrolling effect
   * @param $scrollingParent {object}
   */
  function setReportScroll($scrollingParent) {
    var $this = $scrollingParent,
        $reports = $this.find('.report'),
        $dataHeader = $reports.find('.report-header'),
        $dataTable = $reports.find('.report-data'),
        $dataTrs = $dataTable.find('th'),
        scrollTop = $(w).scrollTop(),
        tableOffset;

    if ($reports.length) {
      tableOffset = Math.abs($dataTable.position().top - $dataTable.find('thead').height());

      if (scrollTop > tableOffset) {

        $dataTable.css({
          marginTop: tableOffset
        });

        $dataHeader.css({
          left: $scrollingParent.$tableHolder.offset().left,
          width: $scrollingParent.$tableHolder.outerWidth()
        });

        $dataHeader.find('th').each(function (i) {
          $(this).width($dataTrs.eq(i).width());
        });
      } else {
        $dataTable.css({
          marginTop: 0
        });
      }

      $reports.toggleClass('scroll', (scrollTop > tableOffset));
    }
  }

  // Makes header scroll with content
  function syncScroll($scrollingParent) {
    var left = $scrollingParent.$tableHolder.scrollLeft(),
        $header = $scrollingParent.find('.report-data-head');

    $header.css({
      left: -left
    });
  }

  function reportScroll($scrollingParent) {
    $scrollingParent.$tableHolder = $scrollingParent.find('.table-holder');

    $(w).on('scroll', function () {
      setReportScroll($scrollingParent);
    }).on('resize', function () {
      setReportScroll($scrollingParent);
    });

    $scrollingParent.$tableHolder.on('scroll', function () {
      syncScroll($scrollingParent);
    });
  }

  // ----- Report Scrolling effect ----- //


  /**
   * dialog: Open a dialog box
   * @param $dialog {object}
   * @param noMask {boolean}
   * @returns oldPos {object}
   */
  function dialog($dialog, noMask) {
    var oldPos = $dialog.prev();

    $dialog.appendTo("body");

    centerElem($dialog);
    $(w).on("resize", function () {
      centerElem($dialog);
    });

    $dialog.addClass('opened');

    if (!noMask && $('.dialog-mask').length === 0) {
      $('<div class="dialog-mask"/>').appendTo('body');
    }

    return oldPos;
  }


  /**
   * closeDialog: Close a dialog
   * @param $dialog {object}
   * @param keepMask {boolean}
   */
  function closeDialog($dialog, keepMask) {


    if (Modernizr && Modernizr.csstransitions) {
      $dialog.addClass('removing');

      setTimeout(function () {
        $dialog.removeClass('removing opened');
      }, 300);
    } else {
      $dialog.removeClass('opened');
    }

    if (!keepMask) {
      $('.dialog-mask').remove();
    }
  }


  /**
   * message
   * - Alert a text message, and disappear after given time
   * @param text {string}
   * @param duration {number}
   */
  function message(text, duration) {
    var $message = $('<div class="message">' + text + '</div>');

    duration = duration || 2000;
    dialog($message.appendTo('body'), true);

    setTimeout(function () {
      closeDialog($message, true);
    }, duration);

    setTimeout(function () {
      $message.remove();
    }, duration + 1000);
  }

  // Let's Go!
  w.CDP = {
    setLang: setLang,
    parseLocaleKey: parseLocaleKey,
    destroyComponent: destroyComponent,
    centerElem: centerElem,
    reportScroll: reportScroll,
    dialog: dialog,
    closeDialog: closeDialog,
    message: message
  };
}(window, document));
